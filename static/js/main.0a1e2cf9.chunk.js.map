{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["isASign","input","trim","validNumberKeys","validSignKeys","App","useState","display","setDisplay","result","setResult","showResult","setShowResult","handleEqualClick","useCallback","formartter","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","length","replaced","map","item","format","eval","join","handleClear","handleSignsClick","sign","handleNumberClick","numb","newDisplay","splice","useEffect","keyboardInputListener","key","indexOf","window","addEventListener","removeEventListener","className","onClick","size","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+jCAWMA,QAAU,SAACC,GACf,MACmB,MAAjBA,EAAMC,QACW,MAAjBD,EAAMC,QACW,MAAjBD,EAAMC,QACW,MAAjBD,EAAMC,QAIJC,gBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChEC,cAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SAErD,SAASC,MAAO,IAAD,UACiBC,oDAAS,IAD1B,2KACNC,QADM,cACGC,WADH,yBAEeF,oDAAS,IAFxB,4KAENG,OAFM,cAEEC,UAFF,yBAGuBJ,qDAAS,GAHhC,4KAGNK,WAHM,cAGMC,cAHN,cAKPC,iBAAmBC,wDAAY,WACnC,IAAMC,WAAa,IAAIC,KAAKC,aAAa,QAAS,CAChDC,sBAAuB,EACvBC,sBAAuB,IAGzB,GAAKZ,QAAQa,OAAb,CAEA,IAAMC,SAAWd,QAAQe,KAAI,SAACC,GAC5B,MAAoB,MAAhBA,EAAKrB,OAAuB,MACZ,MAAhBqB,EAAKrB,OAAuB,MACzBqB,KAGTX,eAAc,GACdF,UAAUK,WAAWS,OAAOC,KAAKJ,SAASK,KAAK,OAC/ClB,WAAW,OACV,CAACD,UAEEoB,YAAc,iBAAM,CAACnB,WAAW,IAAKI,eAAc,KAEnDgB,iBAAmBd,wDACvB,SAACe,GACU,MAATA,IAAiBA,EAAO,KACf,MAATA,IAAiBA,EAAO,KACxBtB,QAAQa,SACLpB,QAAQO,QAAQA,QAAQa,OAAS,KAClCZ,WAAW,GAAD,8JAAKD,SAAL,YAAkBsB,EAAlB,UAEd,CAACtB,UAGGuB,kBAAoBhB,wDACxB,SAACiB,GAEC,GADAnB,eAAc,IACTL,QAAQa,QAAUpB,QAAQO,QAAQA,QAAQa,OAAS,IACtDZ,WAAW,GAAD,8JAAKD,SAAL,CAAcwB,EAAO,UAC1B,CACL,IAAMC,EAAazB,QACnByB,EAAWC,OACTD,EAAWZ,OAAS,EACpB,EACAY,EAAWA,EAAWZ,OAAS,GAAKW,GAEtCvB,WAAW,uJAAIwB,OAGnB,CAACzB,UAyCH,OAtCA2B,sDAAU,WACR,IAAMC,EAAwB,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAC/B,GAAI,UAAIjC,gBAAoBC,eAAeiC,QAAQD,IAAQ,EACzD,OAAQA,GACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACHN,kBAAkBM,GAClB,MACF,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACHR,iBAAiBQ,GACjB,MACF,IAAK,IACL,IAAK,QACHvB,mBACA,MACF,QACE,SAMR,OAFAyB,OAAOC,iBAAiB,QAASJ,GAE1B,WACLG,OAAOE,oBAAoB,QAASL,MAErC,CAACL,kBAAmBF,iBAAkBf,mBAGvC,kEAAK4B,UAAU,MAAf,SACE,mEAAKA,UAAU,YAAf,UACE,kEAAKA,UAAU,UAAf,SACG9B,WACC,kEAAK8B,UAAU,gBAAf,SAAgChC,SAEhC,kEAAKgC,UAAU,gBAAf,SAAgClC,QAAQmB,KAAK,QAGjD,kEAAKgB,QAASf,YAAac,UAAU,YAArC,mBAGA,kEAAKC,QAAS7B,iBAAkB4B,UAAU,YAA1C,SACE,2DAAC,8CAAD,CAAaE,KAAK,KAAKC,MAAM,YAE/B,kEAAKF,QAAS,kBAAMd,iBAAiB,MAAMa,UAAU,UAArD,SACE,2DAAC,8CAAD,CAAYE,KAAK,KAAKC,MAAM,YAE9B,kEAAKF,QAAS,kBAAMd,iBAAiB,MAAMa,UAAU,YAArD,SACE,2DAAC,8CAAD,CAAaE,KAAK,KAAKC,MAAM,YAE/B,kEAAKF,QAAS,kBAAMd,iBAAiB,MAAMa,UAAU,eAArD,SACE,2DAAC,8CAAD,CAASE,KAAK,KAAKC,MAAM,YAE3B,kEAAKF,QAAS,kBAAMd,iBAAiB,MAAMa,UAAU,aAArD,SACE,2DAAC,8CAAD,CAAcE,KAAK,KAAKC,MAAM,YAE/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGtB,KAAI,SAACS,GAAD,OAClC,kEACEW,QAAS,kBAAMZ,kBAAkBC,IAEjCU,UAAS,wBAAmBV,GAH9B,SAKGA,GAHIA,WAWF1B,2B,iGClJAwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnD,EAAA,EAAD,MAEFoD,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0a1e2cf9.chunk.js","sourcesContent":["import \"./index.css\";\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport {\n  CgMathEqual,\n  CgMathDivide,\n  CgMathMinus,\n  CgMathPlus,\n  CgClose,\n} from \"react-icons/cg\";\n\nconst isASign = (input) => {\n  return (\n    input.trim() === \"+\" ||\n    input.trim() === \"-\" ||\n    input.trim() === \"x\" ||\n    input.trim() === \":\"\n  );\n};\n\nconst validNumberKeys = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\nconst validSignKeys = [\"+\", \"-\", \"*\", \":\", \"=\", \"/\", \"Enter\"];\n\nfunction App() {\n  const [display, setDisplay] = useState([]);\n  const [result, setResult] = useState(\"\");\n  const [showResult, setShowResult] = useState(false);\n\n  const handleEqualClick = useCallback(() => {\n    const formartter = new Intl.NumberFormat(\"en-US\", {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    });\n\n    if (!display.length) return;\n\n    const replaced = display.map((item) => {\n      if (item.trim() === \"x\") return \" * \";\n      if (item.trim() === \":\") return \" / \";\n      return item;\n    });\n\n    setShowResult(true);\n    setResult(formartter.format(eval(replaced.join(\"\"))));\n    setDisplay([]);\n  }, [display]);\n\n  const handleClear = () => [setDisplay([]), setShowResult(false)];\n\n  const handleSignsClick = useCallback(\n    (sign) => {\n      sign === \"*\" && (sign = \"x\");\n      sign === \"/\" && (sign = \":\");\n      display.length &&\n        !isASign(display[display.length - 1]) &&\n        setDisplay([...display, ` ${sign} `]);\n    },\n    [display]\n  );\n\n  const handleNumberClick = useCallback(\n    (numb) => {\n      setShowResult(false);\n      if (!display.length || isASign(display[display.length - 1])) {\n        setDisplay([...display, numb + \"\"]);\n      } else {\n        const newDisplay = display;\n        newDisplay.splice(\n          newDisplay.length - 1,\n          1,\n          newDisplay[newDisplay.length - 1] + numb\n        );\n        setDisplay([...newDisplay]);\n      }\n    },\n    [display]\n  );\n\n  useEffect(() => {\n    const keyboardInputListener = ({ key }) => {\n      if ([...validNumberKeys, ...validSignKeys].indexOf(key) >= 0) {\n        switch (key) {\n          case \"1\":\n          case \"2\":\n          case \"3\":\n          case \"4\":\n          case \"5\":\n          case \"6\":\n          case \"7\":\n          case \"8\":\n          case \"9\":\n          case \"0\":\n            handleNumberClick(key);\n            break;\n          case \"+\":\n          case \"-\":\n          case \"*\":\n          case \"/\":\n            handleSignsClick(key);\n            break;\n          case \"=\":\n          case \"Enter\":\n            handleEqualClick();\n            break;\n          default:\n            return;\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", keyboardInputListener);\n\n    return () => {\n      window.removeEventListener(\"keyup\", keyboardInputListener);\n    };\n  }, [handleNumberClick, handleSignsClick, handleEqualClick]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"display\">\n          {showResult ? (\n            <div className=\"inner-display\">{result}</div>\n          ) : (\n            <div className=\"inner-display\">{display.join(\"\")}</div>\n          )}\n        </div>\n        <div onClick={handleClear} className=\"btn-clear\">\n          CLEAR\n        </div>\n        <div onClick={handleEqualClick} className=\"btn-equal\">\n          <CgMathEqual size=\"30\" color=\"white\" />\n        </div>\n        <div onClick={() => handleSignsClick(\"+\")} className=\"btn-add\">\n          <CgMathPlus size=\"30\" color=\"white\" />\n        </div>\n        <div onClick={() => handleSignsClick(\"-\")} className=\"btn-minus\">\n          <CgMathMinus size=\"30\" color=\"white\" />\n        </div>\n        <div onClick={() => handleSignsClick(\"x\")} className=\"btn-multiply\">\n          <CgClose size=\"30\" color=\"white\" />\n        </div>\n        <div onClick={() => handleSignsClick(\":\")} className=\"btn-divide\">\n          <CgMathDivide size=\"30\" color=\"white\" />\n        </div>\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((numb) => (\n          <div\n            onClick={() => handleNumberClick(numb)}\n            key={numb}\n            className={`btn-number btn${numb}`}\n          >\n            {numb}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}